# Upstream definitions
upstream web_app_1 {
    server web-app-1:80 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream web_app_2 {
    server web-app-2:80 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Default server block - returns 444 for undefined hosts
server {
    listen 80 default_server;
    server_name _;
    
    # Drop requests to undefined hosts
    return 444;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name app1.example.com app2.example.com;
    
    # Rate limiting
    limit_req zone=global burst=20 nodelay;
    limit_conn conn_limit_per_ip 10;
    
    return 301 https://$server_name$request_uri;
}

# App 1 - HTTPS
server {
    listen 443 ssl http2;
    server_name app1.example.com;

    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/app1.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/app1.example.com.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Rate Limiting & Connection Limits
    limit_req zone=global burst=50 nodelay;
    limit_conn conn_limit_per_ip 20;
    limit_conn conn_limit_per_server 1000;

    # Block common attack patterns
    location ~* \.(aspx|php|jsp|cgi)$ {
        return 444;
    }

    # Block suspicious user agents
    if ($http_user_agent ~* (nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|appscan)) {
        return 444;
    }

    # Block suspicious requests
    if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS)$) {
        return 444;
    }

    # API endpoints with stricter rate limiting
    location /api/ {
        limit_req zone=api burst=10 nodelay;
        
        proxy_pass http://web_app_1;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

    # Login endpoints with very strict rate limiting
    location /login {
        limit_req zone=login burst=5 nodelay;
        
        proxy_pass http://web_app_1;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Main location block
    location / {
        # Additional security headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
        
        proxy_pass http://web_app_1;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# App 2 - HTTPS
server {
    listen 443 ssl http2;
    server_name app2.example.com;

    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/app2.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/app2.example.com.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Rate Limiting & Connection Limits
    limit_req zone=global burst=50 nodelay;
    limit_conn conn_limit_per_ip 20;
    limit_conn conn_limit_per_server 1000;

    # Block common attack patterns
    location ~* \.(aspx|php|jsp|cgi)$ {
        return 444;
    }

    # Block suspicious user agents
    if ($http_user_agent ~* (nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|appscan)) {
        return 444;
    }

    location / {
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
        
        proxy_pass http://web_app_2;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}